-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper is
generic (
    C_M_AXI_M00_AXI_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_M00_AXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M00_AXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M00_AXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M00_AXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M00_AXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M00_AXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M00_AXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M00_AXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_M00_AXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M00_AXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m00_axi_AWVALID : OUT STD_LOGIC;
    m_axi_m00_axi_AWREADY : IN STD_LOGIC;
    m_axi_m00_axi_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ADDR_WIDTH-1 downto 0);
    m_axi_m00_axi_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ID_WIDTH-1 downto 0);
    m_axi_m00_axi_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m00_axi_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_AWUSER_WIDTH-1 downto 0);
    m_axi_m00_axi_WVALID : OUT STD_LOGIC;
    m_axi_m00_axi_WREADY : IN STD_LOGIC;
    m_axi_m00_axi_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_DATA_WIDTH-1 downto 0);
    m_axi_m00_axi_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_DATA_WIDTH/8-1 downto 0);
    m_axi_m00_axi_WLAST : OUT STD_LOGIC;
    m_axi_m00_axi_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ID_WIDTH-1 downto 0);
    m_axi_m00_axi_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_WUSER_WIDTH-1 downto 0);
    m_axi_m00_axi_ARVALID : OUT STD_LOGIC;
    m_axi_m00_axi_ARREADY : IN STD_LOGIC;
    m_axi_m00_axi_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ADDR_WIDTH-1 downto 0);
    m_axi_m00_axi_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ID_WIDTH-1 downto 0);
    m_axi_m00_axi_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m00_axi_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ARUSER_WIDTH-1 downto 0);
    m_axi_m00_axi_RVALID : IN STD_LOGIC;
    m_axi_m00_axi_RREADY : OUT STD_LOGIC;
    m_axi_m00_axi_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_DATA_WIDTH-1 downto 0);
    m_axi_m00_axi_RLAST : IN STD_LOGIC;
    m_axi_m00_axi_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ID_WIDTH-1 downto 0);
    m_axi_m00_axi_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_RUSER_WIDTH-1 downto 0);
    m_axi_m00_axi_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_BVALID : IN STD_LOGIC;
    m_axi_m00_axi_BREADY : OUT STD_LOGIC;
    m_axi_m00_axi_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_ID_WIDTH-1 downto 0);
    m_axi_m00_axi_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M00_AXI_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel_wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_wrapper,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=12307,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=926,HLS_SYN_LUT=1289,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_data : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data : STD_LOGIC_VECTOR (63 downto 0);
    signal m00_axi_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m00_axi_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln50_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal m00_axi_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal m00_axi_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln58_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_320_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal m00_axi_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal m00_axi_AWVALID : STD_LOGIC;
    signal m00_axi_AWREADY : STD_LOGIC;
    signal m00_axi_WVALID : STD_LOGIC;
    signal m00_axi_WREADY : STD_LOGIC;
    signal m00_axi_ARVALID : STD_LOGIC;
    signal m00_axi_ARREADY : STD_LOGIC;
    signal m00_axi_RVALID : STD_LOGIC;
    signal m00_axi_RREADY : STD_LOGIC;
    signal m00_axi_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m00_axi_RLAST : STD_LOGIC;
    signal m00_axi_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m00_axi_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m00_axi_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m00_axi_BVALID : STD_LOGIC;
    signal m00_axi_BREADY : STD_LOGIC;
    signal m00_axi_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m00_axi_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m00_axi_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln50_reg_168 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln50_reg_168_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_180 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln58_reg_191 : STD_LOGIC_VECTOR (12 downto 0);
    signal m00_axi_addr_reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln50_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_287_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_228_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln50_reg_291 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal m00_axi_addr_read_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_fu_245_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln54_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln58_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state16_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln58_fu_269_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal m00_axi_output_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m00_axi_output_buffer_load_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state16 : STD_LOGIC;
    signal m00_axi_input_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal m00_axi_input_buffer_ce0 : STD_LOGIC;
    signal m00_axi_input_buffer_we0 : STD_LOGIC;
    signal m00_axi_input_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m00_axi_output_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal m00_axi_output_buffer_ce0 : STD_LOGIC;
    signal m00_axi_output_buffer_we0 : STD_LOGIC;
    signal m00_axi_output_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln50_phi_fu_172_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln50_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln58_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal in_data1_fu_202_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component kernel_wrapper_m00_axi_input_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_wrapper_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_data : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_data : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_wrapper_m00_axi_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    kernel_wrapper_control_s_axi_U : component kernel_wrapper_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_data => in_data,
        out_data => out_data);

    kernel_wrapper_m00_axi_m_axi_U : component kernel_wrapper_m00_axi_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M00_AXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M00_AXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M00_AXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M00_AXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M00_AXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M00_AXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M00_AXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M00_AXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M00_AXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M00_AXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M00_AXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m00_axi_AWVALID,
        AWREADY => m_axi_m00_axi_AWREADY,
        AWADDR => m_axi_m00_axi_AWADDR,
        AWID => m_axi_m00_axi_AWID,
        AWLEN => m_axi_m00_axi_AWLEN,
        AWSIZE => m_axi_m00_axi_AWSIZE,
        AWBURST => m_axi_m00_axi_AWBURST,
        AWLOCK => m_axi_m00_axi_AWLOCK,
        AWCACHE => m_axi_m00_axi_AWCACHE,
        AWPROT => m_axi_m00_axi_AWPROT,
        AWQOS => m_axi_m00_axi_AWQOS,
        AWREGION => m_axi_m00_axi_AWREGION,
        AWUSER => m_axi_m00_axi_AWUSER,
        WVALID => m_axi_m00_axi_WVALID,
        WREADY => m_axi_m00_axi_WREADY,
        WDATA => m_axi_m00_axi_WDATA,
        WSTRB => m_axi_m00_axi_WSTRB,
        WLAST => m_axi_m00_axi_WLAST,
        WID => m_axi_m00_axi_WID,
        WUSER => m_axi_m00_axi_WUSER,
        ARVALID => m_axi_m00_axi_ARVALID,
        ARREADY => m_axi_m00_axi_ARREADY,
        ARADDR => m_axi_m00_axi_ARADDR,
        ARID => m_axi_m00_axi_ARID,
        ARLEN => m_axi_m00_axi_ARLEN,
        ARSIZE => m_axi_m00_axi_ARSIZE,
        ARBURST => m_axi_m00_axi_ARBURST,
        ARLOCK => m_axi_m00_axi_ARLOCK,
        ARCACHE => m_axi_m00_axi_ARCACHE,
        ARPROT => m_axi_m00_axi_ARPROT,
        ARQOS => m_axi_m00_axi_ARQOS,
        ARREGION => m_axi_m00_axi_ARREGION,
        ARUSER => m_axi_m00_axi_ARUSER,
        RVALID => m_axi_m00_axi_RVALID,
        RREADY => m_axi_m00_axi_RREADY,
        RDATA => m_axi_m00_axi_RDATA,
        RLAST => m_axi_m00_axi_RLAST,
        RID => m_axi_m00_axi_RID,
        RUSER => m_axi_m00_axi_RUSER,
        RRESP => m_axi_m00_axi_RRESP,
        BVALID => m_axi_m00_axi_BVALID,
        BREADY => m_axi_m00_axi_BREADY,
        BRESP => m_axi_m00_axi_BRESP,
        BID => m_axi_m00_axi_BID,
        BUSER => m_axi_m00_axi_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => m00_axi_ARVALID,
        I_ARREADY => m00_axi_ARREADY,
        I_ARADDR => m00_axi_addr_reg_280,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => m00_axi_RVALID,
        I_RREADY => m00_axi_RREADY,
        I_RDATA => m00_axi_RDATA,
        I_RID => m00_axi_RID,
        I_RUSER => m00_axi_RUSER,
        I_RRESP => m00_axi_RRESP,
        I_RLAST => m00_axi_RLAST,
        I_AWVALID => m00_axi_AWVALID,
        I_AWREADY => m00_axi_AWREADY,
        I_AWADDR => m00_axi_addr_reg_280,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => m00_axi_WVALID,
        I_WREADY => m00_axi_WREADY,
        I_WDATA => m00_axi_output_buffer_load_reg_334,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => m00_axi_BVALID,
        I_BREADY => m00_axi_BREADY,
        I_BRESP => m00_axi_BRESP,
        I_BID => m00_axi_BID,
        I_BUSER => m00_axi_BUSER);

    m00_axi_input_buffer_U : component kernel_wrapper_m00_axi_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => m00_axi_input_buffer_address0,
        ce0 => m00_axi_input_buffer_ce0,
        we0 => m00_axi_input_buffer_we0,
        d0 => m00_axi_addr_read_reg_296,
        q0 => m00_axi_input_buffer_q0);

    m00_axi_output_buffer_U : component kernel_wrapper_m00_axi_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => m00_axi_output_buffer_address0,
        ce0 => m00_axi_output_buffer_ce0,
        we0 => m00_axi_output_buffer_we0,
        d0 => m00_axi_output_buffer_d0,
        q0 => m00_axi_output_buffer_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (m00_axi_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state16)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (m00_axi_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_180 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln53_fu_239_p2 = ap_const_lv1_0))) then 
                i_0_reg_180 <= i_fu_245_p2;
            end if; 
        end if;
    end process;

    phi_ln50_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_reg_287 = ap_const_lv1_0))) then 
                phi_ln50_reg_168 <= add_ln50_reg_291;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln50_reg_168 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_ln58_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m00_axi_AWREADY = ap_const_logic_1))) then 
                phi_ln58_reg_191 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln58_fu_263_p2 = ap_const_lv1_0))) then 
                phi_ln58_reg_191 <= add_ln58_fu_269_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln50_reg_291 <= add_ln50_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln50_reg_287 <= icmp_ln50_fu_222_p2;
                icmp_ln50_reg_287_pp0_iter1_reg <= icmp_ln50_reg_287;
                phi_ln50_reg_168_pp0_iter1_reg <= phi_ln50_reg_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln53_reg_301 <= icmp_ln53_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln58_reg_320 <= icmp_ln58_fu_263_p2;
                icmp_ln58_reg_320_pp2_iter1_reg <= icmp_ln58_reg_320;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_reg_287 = ap_const_lv1_0))) then
                m00_axi_addr_read_reg_296 <= m00_axi_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    m00_axi_addr_reg_280(61 downto 0) <= empty_fu_212_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln58_reg_320 = ap_const_lv1_0))) then
                m00_axi_output_buffer_load_reg_334 <= m00_axi_output_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln53_fu_239_p2 = ap_const_lv1_0))) then
                    zext_ln54_reg_310(12 downto 0) <= zext_ln54_fu_251_p1(12 downto 0);
            end if;
        end if;
    end process;
    m00_axi_addr_reg_280(63 downto 62) <= "00";
    zext_ln54_reg_310(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15, ap_enable_reg_pp2_iter2, ap_CS_fsm_state23, m00_axi_AWREADY, m00_axi_ARREADY, m00_axi_BVALID, icmp_ln50_fu_222_p2, ap_enable_reg_pp0_iter0, icmp_ln53_fu_239_p2, ap_enable_reg_pp1_iter0, icmp_ln58_fu_263_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m00_axi_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln50_fu_222_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln50_fu_222_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln53_fu_239_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln53_fu_239_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m00_axi_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln58_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln58_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((m00_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln50_fu_228_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln50_phi_fu_172_p4) + unsigned(ap_const_lv13_1));
    add_ln58_fu_269_p2 <= std_logic_vector(unsigned(phi_ln58_reg_191) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln50_reg_287, m00_axi_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((m00_axi_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln50_reg_287 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln50_reg_287, m00_axi_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((m00_axi_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln50_reg_287 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state18_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state18_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln50_reg_287, m00_axi_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((m00_axi_RVALID = ap_const_logic_0) and (icmp_ln50_reg_287 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(icmp_ln58_reg_320_pp2_iter1_reg, m00_axi_WREADY)
    begin
                ap_block_state18_io <= ((m00_axi_WREADY = ap_const_logic_0) and (icmp_ln58_reg_320_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state18_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln50_fu_222_p2)
    begin
        if ((icmp_ln50_fu_222_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln53_fu_239_p2)
    begin
        if ((icmp_ln53_fu_239_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state16_assign_proc : process(icmp_ln58_fu_263_p2)
    begin
        if ((icmp_ln58_fu_263_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, m00_axi_BVALID)
    begin
        if (((m00_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln50_phi_fu_172_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln50_reg_287, phi_ln50_reg_168, add_ln50_reg_291)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_phi_ln50_phi_fu_172_p4 <= add_ln50_reg_291;
        else 
            ap_phi_mux_phi_ln50_phi_fu_172_p4 <= phi_ln50_reg_168;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, m00_axi_BVALID)
    begin
        if (((m00_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_data1_fu_202_p4),64));
    i_fu_245_p2 <= std_logic_vector(unsigned(i_0_reg_180) + unsigned(ap_const_lv13_1));
    icmp_ln50_fu_222_p2 <= "1" when (ap_phi_mux_phi_ln50_phi_fu_172_p4 = ap_const_lv13_1000) else "0";
    icmp_ln53_fu_239_p2 <= "1" when (i_0_reg_180 = ap_const_lv13_1000) else "0";
    icmp_ln58_fu_263_p2 <= "1" when (phi_ln58_reg_191 = ap_const_lv13_1000) else "0";
    in_data1_fu_202_p4 <= in_data(63 downto 2);

    m00_axi_ARVALID_assign_proc : process(ap_CS_fsm_state2, m00_axi_ARREADY)
    begin
        if (((m00_axi_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m00_axi_ARVALID <= ap_const_logic_1;
        else 
            m00_axi_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_AWVALID_assign_proc : process(ap_CS_fsm_state15, m00_axi_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m00_axi_AWREADY = ap_const_logic_1))) then 
            m00_axi_AWVALID <= ap_const_logic_1;
        else 
            m00_axi_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_BREADY_assign_proc : process(ap_CS_fsm_state23, m00_axi_BVALID)
    begin
        if (((m00_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            m00_axi_BREADY <= ap_const_logic_1;
        else 
            m00_axi_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln50_reg_287, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_reg_287 = ap_const_lv1_0))) then 
            m00_axi_RREADY <= ap_const_logic_1;
        else 
            m00_axi_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln58_reg_320_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln58_reg_320_pp2_iter1_reg = ap_const_lv1_0))) then 
            m00_axi_WVALID <= ap_const_logic_1;
        else 
            m00_axi_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_blk_n_AR_assign_proc : process(m_axi_m00_axi_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m00_axi_blk_n_AR <= m_axi_m00_axi_ARREADY;
        else 
            m00_axi_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    m00_axi_blk_n_AW_assign_proc : process(m_axi_m00_axi_AWREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            m00_axi_blk_n_AW <= m_axi_m00_axi_AWREADY;
        else 
            m00_axi_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    m00_axi_blk_n_B_assign_proc : process(m_axi_m00_axi_BVALID, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            m00_axi_blk_n_B <= m_axi_m00_axi_BVALID;
        else 
            m00_axi_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    m00_axi_blk_n_R_assign_proc : process(m_axi_m00_axi_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln50_reg_287)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln50_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m00_axi_blk_n_R <= m_axi_m00_axi_RVALID;
        else 
            m00_axi_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    m00_axi_blk_n_W_assign_proc : process(m_axi_m00_axi_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln58_reg_320_pp2_iter1_reg)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln58_reg_320_pp2_iter1_reg = ap_const_lv1_0))) then 
            m00_axi_blk_n_W <= m_axi_m00_axi_WREADY;
        else 
            m00_axi_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    m00_axi_input_buffer_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln54_fu_251_p1, ap_enable_reg_pp0_iter2, zext_ln50_fu_234_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m00_axi_input_buffer_address0 <= zext_ln54_fu_251_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m00_axi_input_buffer_address0 <= zext_ln50_fu_234_p1(13 - 1 downto 0);
        else 
            m00_axi_input_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m00_axi_input_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            m00_axi_input_buffer_ce0 <= ap_const_logic_1;
        else 
            m00_axi_input_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_input_buffer_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln50_reg_287_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln50_reg_287_pp0_iter1_reg = ap_const_lv1_0))) then 
            m00_axi_input_buffer_we0 <= ap_const_logic_1;
        else 
            m00_axi_input_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m00_axi_output_buffer_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, zext_ln54_reg_310, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln58_fu_275_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            m00_axi_output_buffer_address0 <= zext_ln58_fu_275_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m00_axi_output_buffer_address0 <= zext_ln54_reg_310(13 - 1 downto 0);
        else 
            m00_axi_output_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m00_axi_output_buffer_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            m00_axi_output_buffer_ce0 <= ap_const_logic_1;
        else 
            m00_axi_output_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m00_axi_output_buffer_d0 <= std_logic_vector(unsigned(m00_axi_input_buffer_q0) + unsigned(ap_const_lv32_1));

    m00_axi_output_buffer_we0_assign_proc : process(icmp_ln53_reg_301, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln53_reg_301 = ap_const_lv1_0))) then 
            m00_axi_output_buffer_we0 <= ap_const_logic_1;
        else 
            m00_axi_output_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln50_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln50_reg_168_pp0_iter1_reg),64));
    zext_ln54_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_180),64));
    zext_ln58_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln58_reg_191),64));
end behav;
